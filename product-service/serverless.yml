service: product-service

frameworkVersion: '3'

provider:
  name: aws
  stage: dev
  runtime: nodejs14.x
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt:
                - productsTable
                - Arn
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - Fn::GetAtt:
                - CatalogItemsQueue
                - Arn
        - Effect: Allow
          Action:
            - sns:*
          Resource: !Ref CreateCatalogItemTopic

  environment:
    DB_NAME: ${ssm(${self:provider.region}):/fshm/${self:provider.stage}/rds/db}
    DB_HOST: ${ssm(${self:provider.region}):/fshm/${self:provider.stage}/rds/host}
    DB_PORT: ${ssm(${self:provider.region}):/fshm/${self:provider.stage}/rds/port}
    DB_USER: ${ssm(${self:provider.region}):/fshm/${self:provider.stage}/rds/user}
    DB_SECRET: ${ssm(${self:provider.region}):/fshm/${self:provider.stage}/rds/secret}
    REGION: ${self:provider.region}
    PRODUCTS_TABLE_NAME: products-${self:provider.stage}
    SNS_ARN: !Ref CreateCatalogItemTopic

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  SNSSubscriptionMainEmail: gatilov4@gmail.com
  SNSSubscriptionProductManagerEmail: gatik-product-manager@mailsac.com
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true
    packager: 'npm'
    excludeFiles: tests/**/*.spec.js

functions:
  getProductsList:
    handler: src/handler.getProductsList
    events:
      - http:
          method: get
          path: /api/v1/products
          cors: true
  getProductById:
    handler: src/handler.getProductById
    events:
      - http:
          method: get
          path: /api/v1/products/{id}
          cors: true
  createProduct:
    handler: src/handler.createProduct
    events:
      - http:
          method: post
          path: /api/v1/products
          cors: true
  catalogBatchProcess:
    handler: src/handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn

resources:
  Resources:
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: CatalogItemsQueue
    CreateCatalogItemTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: CreateCatalogItemTopic
    CreateCatalogItemSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref CreateCatalogItemTopic
        Endpoint: ${self:custom.SNSSubscriptionMainEmail}
        Protocol: email
    CreateEmptyCatalogItemSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref CreateCatalogItemTopic
        Endpoint: ${self:custom.SNSSubscriptionProductManagerEmail}
        Protocol: email
        FilterPolicy:
          count:
            - numeric:
                - '='
                - 0
    productsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: products-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: count
            AttributeType: N
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: title
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ProductsCount
            KeySchema:
              - AttributeName: count
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: ProductsCategory
            KeySchema:
              - AttributeName: categoryId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    OriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "Images Gallery OAI"
    ImagesS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: fshm-products-images-dev
        AccessControl: BucketOwnerFullControl
        WebsiteConfiguration:
          IndexDocument: index.html
    ImagesS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImagesS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Principal:
                AWS: !Join
                  - ''
                  - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'
                    - ' '
                    - !Ref OriginAccessIdentity
              Resource: !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ImagesS3Bucket
                  - /*
    ImagesCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt ImagesS3Bucket.RegionalDomainName
              Id: ImagesGallery
              S3OriginConfig:
                OriginAccessIdentity: !Join
                  - ''
                  - - origin-access-identity/cloudfront/
                    - !Ref OriginAccessIdentity
          Enabled: 'true'
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: ImagesGallery
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'